'''
Usage:
    Golay.py --encoding <path> <path2>
    Golay.py --decoding <path> <path2>

Options:
    <path>               Путь к кодируеому/закодированному файлу.
    <path2>              Путь к выходному файлу.
    --encoding           Флаг для кодирования.
    --decoding           Флаг для декодирования.
'''

from docopt import docopt
import matplotlib.pyplot as plt
import numpy as np
import cv2
import pickle

if __name__ == "__main__":
    args = docopt(__doc__)

syndromes = {'01011100011':'00000000000000000000001','10111000110':'00000000000000000000010','00101101111':'00000000000000000000100','01011011110':'00000000000000000001000','10110111100':'00000000000000000010000','00110011011':'00000000000000000100000','01100110110':'00000000000000001000000','11001101100':'00000000000000010000000','11000111011':'00000000000000100000000','11010010101':'00000000000001000000000','11111001001':'00000000000010000000000','10101110001':'00000000000100000000000','11100100101':'00000000000000000000011','01110001100':'00000000000000000000101','00000111101':'00000000000000000001001','11101011111':'00000000000000000010001','01101111000':'00000000000000000100001','00111010101':'00000000000000001000001','10010001111':'00000000000000010000001','10011011000':'00000000000000100000001','10001110110':'00000000000001000000001','10100101010':'00000000000010000000001','11110010010':'00000000000100000000001','10010101001':'00000000000000000000110','11100011000':'00000000000000000001010','00001111010':'00000000000000000010010','10001011101':'00000000000000000100010','11011110000':'00000000000000001000010','01110101010':'00000000000000010000010','01111111101':'00000000000000100000010','01101010011':'00000000000001000000010','01000001111':'00000000000010000000010','00010110111':'00000000000100000000010','01110110001':'00000000000000000001100','10011010011':'00000000000000000010100','00011110100':'00000000000000000100100','01001011001':'00000000000000001000100','11100000011':'00000000000000010000100','11101010100':'00000000000000100000100','11111111010':'00000000000001000000100','11010100110':'00000000000010000000100','10000011110':'00000000000100000000100','11101100010':'00000000000000000011000','01101000101':'00000000000000000101000','00111101000':'00000000000000001001000','10010110010':'00000000000000010001000','10011100101':'00000000000000100001000','10001001011':'00000000000001000001000','10100010111':'00000000000010000001000','11110101111':'00000000000100000001000','10000100111':'00000000000000000110000','11010001010':'00000000000000001010000','01111010000':'00000000000000010010000','01110000111':'00000000000000100010000','01100101001':'00000000000001000010000','01001110101':'00000000000010000010000','00011001101':'00000000000100000010000','01010101101':'00000000000000001100000','11111110111':'00000000000000010100000','11110100000':'00000000000000100100000','11100001110':'00000000000001000100000','11001010010':'00000000000010000100000','10011101010':'00000000000100000100000','10101011010':'00000000000000011000000','10100001101':'00000000000000101000000','10110100011':'00000000000001001000000','10011111111':'00000000000010001000000','11001000111':'00000000000100001000000','00001010111':'00000000000000110000000','00011111001':'00000000000001010000000','00110100101':'00000000000010010000000','01100011101':'00000000000100010000000','00010101110':'00000000000001100000000','00111110010':'00000000000010100000000','01101001010':'00000000000100100000000','00101011100':'00000000000011000000000','01111100100':'00000000000101000000000','01010111000':'00000000000110000000000'}

g = np.array([[1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
[1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
[0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
[0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
[1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
[0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
[0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
[1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
[0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]])

h = np.array([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0],
[0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1],
[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0],
[0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1],
[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1],
[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1],
[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1]])

h = h.transpose()

def encoding():

    path = args['<path>']
    f = open(path, 'rb')

    image = np.asarray(bytearray(f.read()), dtype="uint8")
    imageBGR = cv2.imdecode(image, cv2.IMREAD_COLOR)
    img = cv2.cvtColor(imageBGR, cv2.COLOR_BGR2RGB)

    binaryimage = []

    img = img.reshape([img.shape[0],img.shape[1],3])
    for i in range(0,len(img)):

        binaryimage.append([])

        for j in range(0,len(img[i])):

            binaryimage[i].append([])
            binaryimage[i][j].append(bin(img[i][j][0])[2::])
            binaryimage[i][j][0] = '0' * 4 + ('0' * (8 - (len(binaryimage[i][j][0])))+ binaryimage[i][j][0])
            binaryimage[i][j].append(bin(img[i][j][1])[2::])
            binaryimage[i][j][1] = '0' * 4 + ('0' * (8 - (len(binaryimage[i][j][1])))+ binaryimage[i][j][1])
            binaryimage[i][j].append(bin(img[i][j][2])[2::])
            binaryimage[i][j][2] = '0' * 4 + ('0' * (8 - (len(binaryimage[i][j][2])))+ binaryimage[i][j][2])

    for i in binaryimage:

        first = binaryimage.index(i)

        for j in i:

            second = binaryimage[first].index(j)

            for k in j:

                third = binaryimage[first][second].index(k)

                c = np.array(list(k))
                c = c.astype(np.int32)

                codeword = ''

                for i in range(0, 23):

                    codeword += str(sum(g[:, i] * c) % 2)

                binaryimage[first][second][third] = codeword
    path2 = args['<path2>']
    outfile = open(path2, 'wb')
    pickle.dump(binaryimage, outfile)
    outfile.close()


def decoding():
    path = args['<path>']
    f = open(path, 'rb')
    binaryimage = pickle.load(f)
    f.close()


    for i in binaryimage:

        first = binaryimage.index(i)

        for j in i:

            second = binaryimage[first].index(j)

            for k in j:

                third = binaryimage[first][second].index(k)

                z = np.array(list(k))

                z = z.astype(np.int32)

                syndrome = ''

                for i in range(0, 11):

                    syndrome += str(sum(h[:, i] * z) % 2)

                count = 0

                for i in syndrome:

                    if i == '1':

                        count += 1

                bitwise = ''

                if count <= 3 and count != 0:

                    syndrome = syndrome + '0' * 12
                    syndrome = np.array(list(syndrome))
                    syndrome = syndrome.astype(np.int32)

                    for i in np.bitwise_xor(z, syndrome):

                        bitwise += str(i)

                    binaryimage[first][second][third] = bitwise

                elif count > 3:

                    for key in syndromes:

                        syndrome = np.array(list(syndrome))
                        syndrome = syndrome.astype(np.int32)
                        key = np.array(list(key))
                        key = key.astype(np.int32)
                        y = np.bitwise_xor(key, syndrome)

                        newcount = 0
                        y = str(y)

                        for i in y:

                            if i == '1':

                                newcount += 1

                        if newcount < count:

                            nkey = key
                            count = newcount

                    sd = np.bitwise_xor(syndrome, nkey)
                    sd2 = ''

                    for i in sd:
                        sd2 += str(i)

                    sd2 = sd2 + '0' * 12
                    sd = np.array(list(sd2))
                    sd = sd.astype(np.int32)

                    out = ''

                    for i in nkey:
                        out += str(i)

                    syndrome2 = np.array(list(syndromes[out]))
                    syndrome2 = syndrome2.astype(np.int32)

                    for i in np.bitwise_xor(np.bitwise_xor(z,sd),syndrome2):
                        bitwise += str(i)

                    binaryimage[first][second][third] = bitwise


    outpixels = []

    for i in binaryimage:

        outpixels.append([])
        first = binaryimage.index(i)

        for j in i:

            second = binaryimage[first].index(j)

            x = j[0]
            y = j[1]
            j[0] = int(j[0],2) % 256
            j[1] = int(j[1],2) % 256
            j[2] = int(j[2],2) % 256

            outpixels[first].append(j)
    path2 = args['<path2>']
    outpixels = np.array(outpixels)
    fig = plt.imshow(outpixels)
    fig.axes.get_xaxis().set_visible(False)
    fig.axes.get_yaxis().set_visible(False)
    plt.savefig(path2)

if args['--encoding']:
    encoding()
elif args['--decoding']:
    decoding()